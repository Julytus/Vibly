---
version: '3.8'
services:
  config-service:
    build:
      context: ./config-service
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=native
    volumes:
      - ./config-service/src/main/resources/shared:/app/shared
    networks:
      - socbook-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    depends_on:
      config-service:
        condition: service_healthy
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URL=http://config-service:8888
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
    networks:
      - socbook-network
  identity-service:
    build:
      context: ./identity-service
      dockerfile: Dockerfile
    depends_on:
      config-service:
        condition: service_started
      discovery-server:
        condition: service_started
      mysql8:
        condition: service_healthy
    ports:
      - "9001:9001"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URL=http://config-service:8888
      - DISCOVERY_SERVER_URL=http://discovery-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql8:3306/identity?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.MySQL8Dialect
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
    networks:
      - socbook-network
  #ProfileDb
  neo4j:
    image: neo4j:5
    container_name: neo4j
    environment:
      NEO4J_AUTH: neo4j/12345678
    ports:
      - "7474:7474"  # Port for Neo4j Browser (web interface)
      - "7687:7687"  # Database communication
    volumes:
      - neo4j_data:/data  # Lưu trữ dữ liệu Neo4j
    networks:
      - socbook-network

  #IndentityDB
  mysql8:
    image: mysql:8.1.0
    container_name: mysql8
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
      MYSQL_DATABASE: identity
      MYSQL_ROOT_HOST: "%"
    ports:
      - "3306:3306"
    networks:
      - socbook-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    environment:
      PMA_HOST: mysql8
      PMA_USER: root
      PMA_PASSWORD: ""
    ports:
      - "8081:80"
    depends_on:
      - mysql8
    networks:
      - socbook-network

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.4.6
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   networks:
  #     - socbook-network

  # broker:
  #   image: confluentinc/cp-server:7.4.6
  #   hostname: broker
  #   container_name: broker
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #     - "9101:9101"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_JMX_PORT: 9101
  #     KAFKA_JMX_HOSTNAME: localhost
  #     CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
  #     CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
  #     CONFLUENT_METRICS_ENABLE: 'true'
  #     CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
  #   networks:
  #     - socbook-network

  # control-center:
  #   image: confluentinc/cp-enterprise-control-center:7.7.0
  #   hostname: control-center
  #   container_name: control-center
  #   depends_on:
  #     - broker
  #   ports:
  #     - "9021:9021"
  #   environment:
  #     CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
  #     CONTROL_CENTER_REPLICATION_FACTOR: 1
  #     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
  #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
  #     CONFLUENT_METRICS_TOPIC_REPLICATION: 1
  #     PORT: 9021
  #   networks:
  #     - socbook-network
  # zipkin:
  #   image: ghcr.io/openzipkin/zipkin-slim:${TAG:-latest}
  #   container_name: zipkin
  #   # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables
  #   environment:
  #     - STORAGE_TYPE=mem
  #     # Uncomment to enable self-tracing
  #     # - SELF_TRACING_ENABLED=true
  #     # Uncomment to increase heap size
  #     # - JAVA_OPTS=-Xms128m -Xmx128m -XX:+ExitOnOutOfMemoryError
  #   ports:
  #     # Port used for the Zipkin UI and HTTP Api
  #     - "9411:9411"
  #   # Uncomment to enable debug logging
  #   # command: --logging.level.zipkin2=DEBUG
    
volumes:
  neo4j_data:
    driver: local

networks:
  socbook-network:
    driver: bridge