services:
  #Redis
  redis:
    image: docker.io/redis:7.2.3
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data
    networks:
      - vibly-network
  #ProfileDb
  neo4j:
    image: neo4j:5
    container_name: neo4j
    environment:
      NEO4J_AUTH: neo4j/12345678
    ports:
      - "7474:7474"  # Port for Neo4j Browser (web interface)
      - "7687:7687"  # Database communication
    volumes:
      - neo4j_data:/data  # Lưu trữ dữ liệu Neo4j
    networks:
      - vibly-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "12345678", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  #IndentityDB
  mysql8:
    image: mysql:8.1.0
    container_name: mysql8
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
      MYSQL_DATABASE: identity
      MYSQL_ROOT_HOST: "%"
    ports:
      - "3306:3306"
    networks:
      - vibly-network

  config-service:
    build:
      context: ./config-service
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=native
    volumes:
      - ./config-service/src/main/resources/shared:/app/shared
    networks:
      - vibly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    depends_on:
      config-service:
        condition: service_healthy
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URL=http://config-service:8888
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
    networks:
      - vibly-network

  identity-service:
    build:
      context: ./identity-service
      dockerfile: Dockerfile
    depends_on:
      config-service:
        condition: service_started
      mysql8:
        condition: service_healthy
      discovery-server:
        condition: service_started
    ports:
      - "9001:9001"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URL=http://config-service:8888
      - DISCOVERY_SERVER_URL=http://discovery-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql8:3306/identity?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.MySQL8Dialect
      - KAFKA_SERVERS=kafka:9092
      - PROFILE_SERVICE_URL=http://profile-service:9002/profile
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
    networks:
      - vibly-network

  profile-service:
    build:
      context: ./profile-service
      dockerfile: Dockerfile
    depends_on:
      config-service:
        condition: service_started
      discovery-server:
        condition: service_started
      neo4j:
        condition: service_healthy
    ports:
      - "9002:9002"
    environment:
      - PROFILE_SERVICE_PORT=9002
      - CONFIG_SERVER_URL=http://config-service:8888
      - DISCOVERY_SERVER_URL=http://discovery-server:8761/eureka/
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=12345678
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
    networks:
      - vibly-network
    volumes:
      - ./uploads:/app/uploads
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    depends_on:
      mongodb:
        condition: service_healthy
    ports:
      - "9003:9003"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - NOTIFICATION_SERVICE_PORT=9003
      - KAFKA_SERVERS=kafka:9092
      - KAFKA_GROUP_ID=notification-group
      - SPRING_DATA_MONGODB_URI=mongodb://root:root@mongodb:27017/notification-service?authSource=admin
      - CONFIG_SERVER_URL=http://config-service:8888
      - DISCOVERY_SERVER_URL=http://discovery-server:8761/eureka/
      - brevo-apikey=${BREVO_API_KEY}
    networks:
      - vibly-network
    healthcheck:
      test: [ "CMD", "curl", "-f" ]
      interval: 30s
      timeout: 10s
      retries: 5

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    depends_on:
      config-service:
        condition: service_started
      discovery-server:
        condition: service_started
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URL=http://config-service:8888
      - DISCOVERY_SERVER_URL=http://discovery-server:8761/eureka/
      - IDENTITY_SERVICE_URL=http://identity-service:9001/identity
    networks:
      - vibly-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    environment:
      PMA_HOST: mysql8
      PMA_USER: root
      PMA_PASSWORD: ""
    ports:
      - "8081:80"
    depends_on:
      - mysql8
    networks:
      - vibly-network

  kafka:
    image: bitnami/kafka:3.7.0
    container_name: kafka
    hostname: kafka
    ports:
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://${DOCKER_HOST_IP:-localhost}:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    extra_hosts:
      - "host.docker.internal:host-gateway" 
    networks:   
      - vibly-network
  # MongoDB service
  mongodb:
    image: bitnami/mongodb:7.0.11
    container_name: mongodb-7.0.11
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    ports:
      - "27017:27017"
    environment:
      - MONGODB_ROOT_USER=root
      - MONGODB_ROOT_PASSWORD=root
    networks:
      - vibly-network
    volumes:
      - mongodb_data:/bitnami/mongodb

  # zipkin:
  #   image: ghcr.io/openzipkin/zipkin-slim:${TAG:-latest}
  #   container_name: zipkin
  #   # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables
  #   environment:
  #     - STORAGE_TYPE=mem
  #     # Uncomment to enable self-tracing
  #     # - SELF_TRACING_ENABLED=true
  #     # Uncomment to increase heap size
  #     # - JAVA_OPTS=-Xms128m -Xmx128m -XX:+ExitOnOutOfMemoryError
  #   ports:
  #     # Port used for the Zipkin UI and HTTP Api
  #     - "9411:9411"
  #   # Uncomment to enable debug logging
  #   # command: --logging.level.zipkin2=DEBUG

  chat-service:
    build:
      context: ./chat-service
      dockerfile: Dockerfile
    depends_on:
      mongodb:
        condition: service_healthy
      config-service:
        condition: service_started
      discovery-server:
        condition: service_started
    ports:
      - "9005:9005"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CHAT_SERVICE_PORT=9005
      - CONFIG_SERVER_URL=http://config-service:8888
      - DISCOVERY_SERVER_URL=http://discovery-server:8761/eureka/
      - SPRING_DATA_MONGODB_URI=mongodb://root:root@mongodb:27017/chat_service?authSource=admin
      - KAFKA_SERVERS=kafka:9092
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
    networks:
      - vibly-network
    volumes:
      - ./uploads:/app/uploads

  socket-service:
    build:
      context: ./socket-service
      dockerfile: Dockerfile
    depends_on:
      config-service:
        condition: service_started
      discovery-server:
        condition: service_started
      kafka:
        condition: service_started
    ports:
      - "9006:9006"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SOCKET_SERVICE_PORT=9006
      - CONFIG_SERVER_URL=http://config-service:8888
      - DISCOVERY_SERVER_URL=http://discovery-server:8761/eureka/
      - KAFKA_SERVERS=kafka:9092
      - KAFKA_GROUP_ID=chat-group
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
    networks:
      - vibly-network

volumes:
  neo4j_data:
    driver: local
  mongodb_data:
    driver: local
  uploads_data:
    driver: local


networks:
  vibly-network:
    driver: bridge